{"version":3,"sources":["webpack:///./node_modules/sveltail/lib/utilities/Alerter.svelte","webpack:///./node_modules/sveltail/lib/utilities/Notifier.svelte"],"names":[],"mappings":"AA6HE;EAAa;AACI,C;AC0CjB;EAAoB,wBACO;EACzB;AAAiC,C","file":"css/2.2.css","sourcesContent":["<script>\n  import { createEventDispatcher, getContext, onMount } from 'svelte';\n  import { fade } from 'svelte/transition';\n  import Icon from '../components/Icon.svelte';\n  import Button from '../components/Button.svelte';\n\n  // Globals\n  const dispatch = createEventDispatcher();\n  const { helpers } = getContext('$$app');\n\n  let props = null;\n  let msg;\n  let confirm;\n  const dismiss = () => {\n    props = null;\n  };\n\n  // Native\n  if (process.env.platform === 'ns-android' || process.env.platform === 'ns-ios') {\n    //\n  }\n\n  // Web / Hybrid\n  if (process.env.platform !== 'ns-android' && process.env.platform !== 'ns-ios') {\n    msg = ({ title, message, icon, hideBar, barColorBg, barColorText, persistant, actions, actionsClass }) => {\n      const html = document.querySelector('html');\n      html.classList.add('overflow-hidden');\n      props = {\n        title: helpers.isString(title) ? title : null,\n        message: helpers.isString(message) ? message : null,\n        icon: helpers.getIcon(icon),\n        hideBar: helpers.getBoolean(hideBar),\n        barColorBg: helpers.getColor(barColorBg, 'primary'),\n        barColorText: helpers.getColor(barColorText, 'white'),\n        persistant: helpers.getBoolean(persistant),\n        actions: helpers.isArray(actions)\n          ? actions.map((i, index) => {\n              return { \n                id: index,\n                label: i.label,\n                size: i.size,\n                icon: i.icon,\n                colorBg: i.colorBg,\n                colorText: i.colorText,\n                onClick() {\n                  if (helpers.isFunction(i.onClick)) result = i.onClick();\n                  dismiss();  \n                }, \n              };\n            }\n          )\n          : [{\n            label: 'Okay',\n            size: 'sm',\n            colorBg: 'primary',\n            onClick: dismiss,\n          }],\n        actionsClass: helpers.isString(actionsClass) ? actionsClass : 'justify-end',\n      };\n    };\n    confirm = () => {\n      const html = document.querySelector('html');\n      html.classList.remove('overflow-hidden');\n\n\n    };\n  }\n\n  onMount(() => {\n    dispatch('ready', {\n      alerter: {\n        msg,\n        confirm,\n      },\n    });\n  });\n</script>\n\n{#if props}\n  {#if process.env.platform === 'ns-android' || process.env.platform === 'ns-ios'}\n    <gridLayout  width=\"100%\" height=\"100%\">\n    </gridLayout>\n  {/if}\n\n  {#if process.env.platform !== 'ns-android' && process.env.platform !== 'ns-ios'}\n    <div class='absolute h-screen w-screen top-0 left-0 flex'>\n      <div\n        class=\"fixed bg-black dark:bg-white inset-0 opacity-50\"\n        on:click={() => {\n          if (!props.persistant) dismiss();\n        }}\n      />\n      <div transition:fade={{ duration: 300 }} class=\"z-10 m-auto st-alerter rounded bg-black text-white dark:bg-white dark:text-black\">\n        {#if !props.hideBar}\n          <div class=\"flex h-12 p-5 items-center justify-between bg-{props.barColorBg} text-{props.barColorText}\">\n            <div>{props.title}</div>\n            <div class=\"cursor-pointer\" on:click={dismiss}><Icon icon=\"fas fa-times\" size=\"md\" /></div>\n          </div>\n        {/if}\n        <div class=\"p-5\">\n          <p>{props.message}</p>\n          {#if props.actions.length > 0}\n              <br>\n              <div class=\"inline-flex w-full {props.actionsClass}\">\n                {#each props.actions as action}\n                  <Button\n                    flat\n                    rounded\n                    class=\"mx-1\"\n                    label={action.label}\n                    size={action.size}\n                    colorBg={action.colorBg}\n                    colorText={action.colorText}\n                    on:click={action.onClick}\n                  />\n                {/each}\n              </div>\n            {/if}\n        </div>\n      </div>\n    </div>\n  {/if}\n{/if}\n\n<style>\n  .st-alerter {\n    min-width: 50vw;\n  }\n</style>","<script>\n  import { createEventDispatcher, onMount, getContext } from 'svelte';\n  import { fly } from 'svelte/transition';\n  import Icon from '../components/Icon.svelte';\n  import Button from '../components/Button.svelte';\n\n  // Globals\n  const dispatch = createEventDispatcher();\n  const { helpers } = getContext('$$app');\n  let notifications = [];\n  let show;\n\n  // Native\n  if (process.env.platform === 'ns-android' || process.env.platform === 'ns-ios') {\n    show = ({ title, message, icon, dismissable, timeout }) => {\n      //\n    };\n  }\n\n  // Web / Hybrid\n  let getStyle;\n  let getPosition;\n\n  if (process.env.platform !== 'ns-android' && process.env.platform !== 'ns-ios') {\n    getStyle = (i, pos, id) => {\n      let style = '';\n      const isTop = pos.indexOf('top') === 0;\n      const isRight = pos.indexOf('right') > -1;\n      const isCenter = pos.indexOf('center') > -1;\n\n      if (isRight) style += 'right: 0;';\n      if (isCenter) style += 'left: 50vw; transform: translateX(-50%);';\n\n      let height = 0;\n      for (let index = i - 1; index >= 0; --index) {\n        height += notifications[index].height;\n      }\n\n      let previous = notifications[i - 1] ? notifications[i - 1] : null;\n      previous = previous ? previous.isTop !== isTop : null;\n\n      if (isTop) style += ` top: ${(i * 20) + height}px;`;\n      else style += ` bottom: ${(i * 20) + height}px;`;\n\n      return style;\n    };\n    getPosition = (pos) => {\n      let position = 'top-right';\n      position = ['top-right', 'top-left', 'top-center', 'bottom-right', 'bottom-left', 'bottom-center']\n        .findIndex((i) => i === pos) > -1\n          ? pos\n          : position;\n      return position;\n    };\n\n    show = ({ title, message, icon, dismissable, position, timeout, persistant, onDismiss, actions, actionsClass }) => {\n      const newTitle = helpers.isString(title) ? title : null;\n      const newMessage = helpers.isString(message) ? message : null;\n      const newIcon = helpers.getIcon(icon);\n\n      const foundIndex = notifications.findIndex((i) => i.title === newTitle && i.message === newMessage && i.icon === newIcon);\n      if (foundIndex < 0) {\n        const id = `notify-${new Date().getTime() + notifications.length}`;\n        const dismiss = () => {\n          notifications = [...notifications.filter((i) => i.id !== id)];\n          if (helpers.isFunction(onDismiss)) onDismiss();\n        };\n        \n        notifications = [...notifications, {\n          id,\n          height: 0,\n          title: newTitle,\n          message: newMessage,\n          icon: newIcon,\n          dismissable: helpers.getBoolean(dismissable),\n          dismiss,\n          timer: persistant ? null : setTimeout(dismiss, timeout || 3000),\n          position: getPosition(position),\n          isTop: getPosition(position).indexOf('bottom') !== 0, \n          badge: 1,\n          actions: helpers.isArray(actions)\n            ? actions.map((i, index) => {\n                return { \n                  id: index,\n                  label: i.label,\n                  size: i.size,\n                  icon: i.icon,\n                  colorBg: i.colorBg,\n                  colorText: i.colorText,\n                  onClick() {\n                    let result = true;\n                    if (helpers.isFunction(i.onClick)) result = i.onClick();\n                    if (helpers.isNull(result) || helpers.isUndefined(result)) result = true;\n                    if (result) dismiss();  \n                  }, \n                };\n              }\n            )\n            : [],\n          actionsClass: helpers.isString(actionsClass) ? actionsClass : 'justify-end',\n        }];\n      } else {\n        const tempArray = notifications.map((i) => i);\n        tempArray[foundIndex].badge += 1;\n        notifications = tempArray;\n      }\n    };\n  }\n\n  onMount(() => {\n    dispatch('ready', {\n      notifier: {\n        show,\n      },\n    });\n  });\n</script>\n\n{#if notifications.length > 0}\n  {#each notifications as item, i (item.id)}\n    {#if process.env.platform === 'ns-android' || process.env.platform === 'ns-ios'}\n      <gridLayout  width=\"100%\" height=\"100%\">\n      </gridLayout>\n    {/if}\n\n    {#if process.env.platform !== 'ns-android' && process.env.platform !== 'ns-ios'}\n      <div\n        in:fly={{ y: item.isTop ? -50 : 50, duration: 500 }}\n        out:fly={{ y: item.isTop ? -50 : 50, duration: 500 }}\n        bind:clientHeight={item.height}\n        class=\"fixed z-30 m-5 p-5 rounded max-w-xs md:max-w-sm bg-black text-white dark:bg-white dark:text-black\"\n        style={getStyle(i, item.position, item.id)}\n      >\n        <div class=\"relative flex\">\n          {#if item.badge > 1}<div class=\"fixed top-0 rounded left-0 st-notifier-badge text-white px-2 py-1\">{item.badge}</div>{/if}\n          {#if item.icon}<Icon icon={item.icon} class=\"ml-1 mr-2\" size=\"md\" />{/if}\n          <div>\n            {#if item.title}<div>{item.title}</div>{/if}\n            {#if item.message}<div>{item.message}</div>{/if}\n\n            {#if item.actions.length > 0}\n              <br>\n              <div class=\"inline-flex w-full {item.actionsClass}\">\n                {#each item.actions as action (action.id)}\n                  <Button\n                    flat\n                    rounded\n                    class=\"mx-1\"\n                    label={action.label}\n                    size={action.size}\n                    colorBg={action.colorBg}\n                    colorText={action.colorText}\n                    on:click={action.onClick}\n                  />\n                {/each}\n              </div>\n            {/if}\n          </div>\n          {#if item.dismissable}\n            <span on:click={item.dismiss}><Icon class=\"ml-4 mr-1 cursor-pointer\" icon=\"fas fa-times-circle\" size=\"sm\" /></span>\n          {/if}\n        </div>\n      </div>\n    {/if}\n  {/each}\n{/if}\n\n<style>\n  .st-notifier-badge {\n    background-color: #0BB5FF;\n    transform: translate(-50%, -10px);\n  }\n</style>"],"sourceRoot":""}